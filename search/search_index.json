{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"First steps","text":""},{"location":"#customblocks-for-markdown","title":"Customblocks for Markdown","text":"<p>Customblocks is an extension for Python-Markdown that settles a common markup for parametrizable and nestable components whose output can be redefined by means of a simple Python function.</p> <p>Many off-the-shelf components are provided such as div-containers, admonitions, figures, link cards, maps... and some embeded widgets from common sites (wikipedia, youtube, vimeo, peertube, mastodon, twitter, facebook, instagram, goteo, verkami...)</p> <p>It also includes convenience tools to ease component definition: hyperscript html generation, cached page fetching and metadata page extraction.</p>"},{"location":"#installation-and-setup","title":"Installation and setup","text":"<p>To install:</p> <pre><code>$ pip install markdown-customblocks\n</code></pre> <p>And then activate it as any other Markdown extension.</p> <p>From command line:</p> <pre><code>$ markdown -x customblocks ...\n</code></pre> <p>In Python code:</p> <pre><code>import markdown\nmd = markdown.Markdown(extensions=[\"customblocks\"])\nmd.convert(markdowncontent)\n</code></pre> <p>In Pelican config:</p> <pre><code>MARKDOWN = {\n    'extensions': [\n        'customblocks',\n    ],\n}\n</code></pre> <p>For MkDocs, add this to <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - customblocks\n</code></pre> <p>If you need to specify additional parameters for the extension, refer to the documentation of your generator.</p>"},{"location":"#basic-usage","title":"Basic usage","text":"<p>Customblocks extension parses markup structures like this one:</p> <pre><code>::: mytype \"value 1\" param2=value2\n    Indented **content**\n</code></pre> <p>And, by default, generates HTML like this:</p> <pre><code>&lt;div class=\"mytype value-1\" param2=\"value2\"&gt;\n   &lt;p&gt;Indented &lt;b&gt;content&lt;/b&gt;&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>This is the output of the default generator: <code>container</code>. But we could bound <code>mytype</code> to a custom Python function like the following one:</p> <pre><code>def mygenerator(ctx, param1, param2):\n    return f\"\"\"&lt;div attrib1=\"{param1}\" attrib2=\"{param2}\"&gt;{ctx.content}&lt;/div&gt;\"\"\"\n</code></pre> <p>And then, previous Markdown would generate this other HTML:</p> <pre><code>&lt;div attrib1=\"value 1\" attrib2=\"value2\"&gt;Indented **content**&lt;/div&gt;\n</code></pre> <p>Notice that this function is not escaping any received value and is not converting anything in the content to Markdown. Luckily, <code>customblocks</code> provides some useful tools for that: the hyperscript generator and the Markdown subparser:</p> <pre><code>from customblocks.utils import E, Markdown\n\ndef mygenerator(ctx, param1, param2):\n    return E('', attrib1=param1, attrib2=param2,\n        Markdown(ctx.content, ctx.parser)\n    )\n</code></pre> <p>You can read more about them at the related documentation.</p>"},{"location":"#built-in-generators","title":"Built-in generators","text":"<p>For convenience, <code>customblocks</code> also provides the following predefined generators:</p> <ul> <li><code>container</code>:     A div element with arbitrary classes, attributes and content. This is the default when no type matches.</li> <li><code>admonition</code>:     Admonitions, boxes for notes, warnings... (quite similar to the standard extra extension).     It is bound to types <code>note</code>,  <code>info</code>, <code>error</code>, <code>warning</code>....</li> <li><code>figure</code>:     Full featured figures with captions, lightbox...</li> <li><code>map</code>:     Maps from OpenStreetMaps.org</li> <li><code>linkcard</code>:     External link cards (like Facebook and Twitter do, when you post a link)</li> <li><code>wikipedia</code>:     Wikipedia article card by lemma (and language)</li> <li><code>youtube</code>:     Embeded videos from youtube.</li> <li><code>vimeo</code>:     Embeded videos from vimeo.</li> <li><code>peertube</code>:     Embeded videos from peertube</li> <li><code>mastodon</code>:     Embeded mastodon posts</li> <li><code>twitter</code>:     Embeded tweets</li> <li><code>facebook</code>:     Embeded post from facebook</li> <li><code>instagram</code>:     Embeded post from instagram</li> <li><code>verkami</code>:     Fund raising project widget in [Verkami]</li> <li><code>goteo</code>:     Fund raising project widget in [Goteo]</li> </ul>"},{"location":"#general-markup-syntax","title":"General markup syntax","text":"<p>This is a more complete example of markup:</p> <pre><code>::: mytype param1 key1=value1 \"other param\" key2='value2 with words' flag1 noflag2\n    Indented **content**\n\n    The block ends whenever the indentation stops\nThis unindented line is not considered part of the block\n</code></pre> <p>The headline: The line starting with <code>:::</code> is the headline. It specifies, first, the block type (<code>mytype</code>) followed by a set of values that will be passed to the generator as parameters.</p> <p>Block type: The type is used to select the generator function. If there is no generator bound to the type, the div-container generator, will be used by default.</p> <p>Quotes: Muti-word values can be passed by using either single or double quotes. You can skip quotes if your value is single worded.</p> <p>Explicit keywords: Also some values may target an explicit parameter with a key. This works as follows: from the available block parameters, values with a key are set first, then the remaining unset parameters are filled by position.</p> <p>Flags (bools): Boolean parameters (flags) can be set by just adding a value with the name of the flag, like <code>flag1</code> in the example. And they can be unset by adding the name with a <code>no</code> prefix, like <code>noflag2</code> in the example.</p> <p>Content: After the headline, several lines of indented content may follow. The content ends with the very first non-emtpy line back on the previous indentation.</p> <p>Indentation is removed from the content for the generator to process it. A block type may choose to interpret this content as markdown as well. So you can have nested blocks by adding extra indentation. For example:</p> <pre><code>::: recipe\n    # Sweet water\n    ::: ingredients \"4 persons\"\n        - two spons of suggar\n        - a glass of tap water\n    ::: mealphoto sweetwater.jpg\n        Looks gorgeus!\n    Drop the suggar into the glass. Stir.\n</code></pre> <p>Note</p> <p>A closing <code>:::</code> tag is optional. For most cases, indentation should be enough, visually, and functionally. But, seldomly, it is necessary. Like in the example below, where the mealphoto content would be mixed with  the later code block</p> <pre><code>::: mealphoto sweetwater.jpg\n        Looks gorgeus!\n:::\n        This is a code block by indentation\n</code></pre>"},{"location":"#further-reading","title":"Further reading","text":"<ul> <li>Full documentation</li> <li>Code</li> <li>Release History</li> <li>Road map</li> <li>Motivation and design choices</li> <li>Inspiration and kudos</li> </ul>"},{"location":"CHANGES/","title":"Release history","text":"<ul> <li>map: fix: Geocoding failed because missing user agent</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-152-2022-12-04","title":"markdown-customblocks 1.5.2 (2022-12-04)","text":"<ul> <li>Fixed documentation link in metadata</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-151-2022-12-04","title":"markdown-customblocks 1.5.1 (2022-12-04)","text":"<ul> <li>Empty release to solve packaging problems</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-150-2022-12-04","title":"markdown-customblocks 1.5.0 (2022-12-04)","text":"<ul> <li>Dropped support for Python&lt;3.8</li> <li>Use backslash \\ to continue the headline on the next line</li> <li>New <code>figure</code> attributes:<ul> <li><code>inline</code>: embeds the image as base64 encoded</li> <li><code>local</code>: turns a remote url image into a relative local resource</li> <li><code>thumb</code>: reduces the size of the image, enlargeable by clicking</li> </ul> </li> <li>Dropped support for Python&lt;3.8</li> <li>Migrated to pyproject</li> <li>Upgrade notes:<ul> <li>Image recommended css for lightbox has changed to enable thumbnailing</li> </ul> </li> </ul>"},{"location":"CHANGES/#markdown-customblocks-141-2022-11-28","title":"markdown-customblocks 1.4.1 (2022-11-28)","text":"<ul> <li>Documentation corrections</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-140-2022-11-20","title":"markdown-customblocks 1.4.0 (2022-11-20)","text":"<ul> <li>Third party generators can be registered by using project   metadata's entry points for <code>markdown.customblocks.generators</code></li> <li>New block types<ul> <li><code>wikipedia</code>: produces a linkcard for a lemma</li> <li><code>mastodon</code>: embed a mastodon post</li> <li><code>peertube</code>: embed a peertube video</li> </ul> </li> <li><code>linkcard</code>:<ul> <li>Keyless values are added as classes to the top level element</li> <li>Extract descriptions from MediaWiki based sites (wikipedia...)</li> <li>Html class <code>squared</code> renamed <code>side</code>, used to identify side images</li> <li>Configurable CSS variables in the recommended stylesheet</li> <li>Improved image layout in the recommended styleshet</li> <li>Side image turns wide image on small devices</li> </ul> </li> <li><code>vimeo</code>:<ul> <li>Wrapping inside <code>div.video.vimeo</code> analog to other video inserts</li> <li>Accepts exceding key and positional parameters like <code>container</code></li> </ul> </li> <li><code>youtube</code>:<ul> <li>Fix: iframe border removed by default</li> </ul> </li> </ul>"},{"location":"CHANGES/#markdown-customblocks-131-2022-11-06","title":"markdown-customblocks 1.3.1 (2022-11-06)","text":"<ul> <li>Tests passing</li> <li>Documentation fixes</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-130-2022-11-06","title":"markdown-customblocks 1.3.0 (2022-11-06)","text":"<ul> <li>New documentation based on mkdocs</li> <li>New block types:<ul> <li><code>map</code>: to embed OSM maps</li> <li><code>facebook</code>: to embed facebook posts (draft: still privacy invasive)</li> <li><code>instagram</code>: to embed instagram posts (draft: still privacy invasive)</li> </ul> </li> <li><code>linkcard</code>: Links are openened in a new tab/window</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-120-2022-03-08","title":"markdown-customblocks 1.2.0 (2022-03-08)","text":"<ul> <li>Figures open the image in a new window</li> <li>Figures lightbox visualization (requires some css)</li> <li>GDPR friendly embeds:<ul> <li>youtube: Use youtube-nocookie.com to avoid youtube cookies</li> <li>vimeo: Use dnt=1 option to avoid vimeo cookies</li> </ul> </li> </ul>"},{"location":"CHANGES/#markdown-customblocks-114-2022-03-05","title":"markdown-customblocks 1.1.4 (2022-03-05)","text":"<ul> <li>FIX: match trailing spaces after the header. Fixes #6</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-113-2022-02-22","title":"markdown-customblocks 1.1.3 (2022-02-22)","text":"<ul> <li>Metadata fix: The license is Affero not MIT</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-112-2022-02-22","title":"markdown-customblocks 1.1.2 (2022-02-22)","text":"<ul> <li>FIX: youtube custom classes were not added (PR #05, Alexey Leshchenko @leshchenko1979, thanks!)</li> <li>FIX: linkcard: link-card-site-icon class was set twice</li> <li>workflows for continuous integration and release</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-111-2020-08-08","title":"markdown-customblocks 1.1.1 (2020-08-08)","text":"<ul> <li>documentation fixes</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-110-2020-08-08","title":"markdown-customblocks 1.1.0 (2020-08-08)","text":"<ul> <li><code>utils.Fetcher</code>: Helper for catched downloads</li> <li><code>utils.PageInfo</code>: Page information retrieval helper</li> <li><code>utils.E</code>: Helper to generate HTML using hyperscript idiom</li> <li><code>utils.Markdown</code>: Helper to include markdown in hyperscript</li> <li><code>linkcard</code>: Example style emulating Wordpress' embedded link</li> <li><code>linkcard</code>: Explicit image, description, title...</li> <li><code>linkcard</code>: Fix: relative links to images and icons</li> <li><code>linkcard</code>: Removed half implemented embedimage flag</li> <li><code>twitter</code>: Cache twitter info downloads</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-100-2020-06-27","title":"markdown-customblocks 1.0.0 (2020-06-27)","text":"<ul> <li>Register a generator with a string like <code>'module.submodule:function'</code></li> <li>Support single quoted values</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-030-2020-06-27","title":"markdown-customblocks 0.3.0 (2020-06-27)","text":"<ul> <li>Provide <code>ctx.config</code> from <code>extension_configs.customblocks.config</code></li> <li>New generators: vimeo, verkami, goteo</li> <li>admonition: title should be a <code>&lt;p&gt;</code> not a <code>&lt;div&gt;</code> for ReST styles to work</li> <li>youtube: responsive/fluid sizing</li> <li>documented all generators</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-020-2020-06-25","title":"markdown-customblocks 0.2.0 (2020-06-25)","text":"<ul> <li>Improve documentation (parameter passing, toc...)</li> <li>Provide <code>ctx.metadata</code> to access Markdown.Meta (from <code>extra.meta</code>, <code>full_yaml_metadata</code>... extensions)</li> <li><code>figure</code>: link to the image</li> </ul>"},{"location":"CHANGES/#markdown-customblocks-010-2020-06-23","title":"markdown-customblocks 0.1.0 (2020-06-23)","text":"<ul> <li>First public version</li> <li>Support for function based generators</li> <li>Default generator: container</li> <li>Example generators: admonition, twitter, youtube, figure, linkcard</li> </ul>"},{"location":"TODO/","title":"Road map","text":""},{"location":"TODO/#common-infrastructure","title":"Common infrastructure","text":"<ul> <li>Flags: coerce to bool?</li> <li>Annotations: coerce to any type</li> </ul>"},{"location":"TODO/#generators","title":"Generators","text":"<ul> <li>Youtube:<ul> <li>Take aspect ratio and sizes from Youtube api</li> <li>Use covers https://i.ytimg.com/vi/{code}/hqdefault.jpg</li> </ul> </li> <li>Twitter<ul> <li>Privacy safe mode</li> </ul> </li> <li>Instagram</li> <li>Map:<ul> <li>Adding parameters</li> </ul> </li> <li>Figure flags:<ul> <li>no flag<ul> <li>Un modified url</li> </ul> </li> <li>local (when remote url)<ul> <li>download</li> <li>place it on a given dir</li> <li>set url to local path</li> </ul> </li> <li>inline<ul> <li>download</li> <li>detect mime type</li> <li>compute base 64</li> <li>set url to data url</li> </ul> </li> <li>thumb<ul> <li>download</li> <li>generate a thumb</li> <li>place the thumb on thumb dir</li> <li>when combined with 'inline'<ul> <li>url to the local path</li> </ul> </li> <li>when combined with 'local'<ul> <li>link to the image</li> </ul> </li> </ul> </li> <li>[x] lightbox</li> <li>sized</li> </ul> </li> </ul>"},{"location":"TODO/#helpers","title":"Helpers","text":"<ul> <li>Fetcher:<ul> <li>configurable cache dir</li> <li>file name too long</li> <li>handle connection errors</li> </ul> </li> </ul>"},{"location":"defining-generators/","title":"Creating new block types","text":""},{"location":"defining-generators/#binding-to-a-typename","title":"Binding to a typename","text":"<p>A block type can be defined just by hooking the generator function to the type.</p>"},{"location":"defining-generators/#python-code","title":"Python Code","text":"<pre><code>import markdown\nmd = markdown.Markdown(\n    extensions=[\"customblocks\"],\n    extension_configs=dict(\n        generators=dict(\n            customblocks={\n                # by direct symbol reference\n                'mytype': mypackage.mymodule.mytype,\n                # or using import strings (notice the colon)\n                'aka_mytype': 'mypackage.mymodule:mytype',\n                ...\n            }\n        )\n    ),\n)\nmd.convert(markdowncontent)\n</code></pre>"},{"location":"defining-generators/#command-line-config","title":"Command line config","text":"<p>If you are using <code>markdown_py</code> command line, you can use the <code>-c config.yaml</code> option, and, in <code>config.yaml</code>, add:</p> <pre><code>customblocks:\n  generators:\n    mytype: mypackage.mymodule:mytype\n    aka_mytype: mypackage.mymodule:mytype\n</code></pre>"},{"location":"defining-generators/#pelican","title":"Pelican","text":"<p>In <code>pelican.conf</code>:</p> <pre><code>MARKDOWN = {\n    ...\n    'extensions_configs': {\n        'customblocks': {\n            'generators': {\n                # by direct symbol reference\n                'mytype': mypackage.mymodule.mytype,\n                # or using import strings (notice the colon)\n                'aka_mytype': 'mypackage.mymodule:mytype',\n            }\n        },\n    },\n}\n</code></pre>"},{"location":"defining-generators/#mkdocs","title":"MkDocs","text":"<p>In <code>mkdocs.yaml</code>:</p> <pre><code>markdown_extensions:\n  - customblocks:\n      generators:\n        mytype: mypackage.mymodule:mytype,\n        aka_mytype: mypackage.mymodule:mytype\n</code></pre>"},{"location":"defining-generators/#packaging","title":"Packaging","text":"<p>If you are distributing the generator as a package, and want it to be bound to a typename on install, register an entry point in the <code>markdown.customblocks.generators</code> group.</p> <p>In <code>setup.py</code>:</p> <pre><code>setup(\n    ...\n    entry_points={\n        ...\n        markdown.customblocks.generators': [\n            'mytype = mypackage.mymodule:mytype',\n            'aka_mytype = mypackage.mymodule:mytype',\n        ],\n    },\n    ...\n}\n</code></pre> <p>Warning</p> <p>Conflicting entrypoints from different packages are resolved randomly. Because of that, be carefull not to register names other developers have already used.</p> <p>It is ok to redefine an existing block type, but let the user to pick it explicitly on config.</p>"},{"location":"defining-generators/#parameter-mapping","title":"Parameter mapping","text":"<p>The signature of the generator will determine the attributes taken from the headline. Say you have a generator with the following signature:</p> <pre><code>def mytype(ctx, param1, myflag:bool, param2, param3, yourflag=True, param4='default2'):\n    ...\n</code></pre> <p>Function parameters are filled using values parsed from head line. Unlike Python, you can interleave in the headline values with and without keys. They are resolved as follows:</p> <ol> <li>Context: The <code>ctx</code> parameter is ignored for parameter matching. See bellow on how to use it.</li> <li>Explicit keys: First, <code>customblocks</code> binds keyworded values on the headline whose key matches a parameter name in the generator     (Excluding parameters defined as 'positional-only')</li> <li>Flag: Flags are parameters either annotated as <code>bool</code> (like example's <code>myflag</code>), or defaulting to <code>True</code> or <code>False</code>, (like example's <code>yourflag</code>).     They are filled as follows:<ul> <li>When a keyless value matches a flag name in the generator (<code>myflag</code>), <code>True</code> is passed</li> <li>When it matches the flag name prefixed with <code>no</code> (<code>nomyflag</code>), <code>False</code> is passed</li> </ul> </li> <li>Positional: Keyless values in the headline are assigned one-to-one by position order to the unassigned parameters, (excluding those defined as 'keyword-only').</li> <li>Varidics: If the signature contains key (<code>**kwds</code>) or positional (<code>*args</code>) varidic variables, any remaining key and keyless values from the headline are assigned to them</li> <li>Unmatched function parameters: If they have no default value, will be warned and assigned an empty string.</li> <li>Unmatched headline parameters: They will be warned and ignored.</li> </ol> <p>For example, by fedding the followin headline to the signature above:</p> <pre><code>::: mytype noyourflag myflag value1 param1=value3 value4 bad=value5\n</code></pre> <p>Will set: <pre><code>param1 = \"value3\" # This will be matched first since uses a explicit key\nyourFlag = False # Flags are set later, from noyourflag\nmyflag = True  # From myflag value\nparam2 = \"value1\" # param1 already filled, next in signature is param2\nparam3 = \"\" # No value given, will be warned, and set to ''\nparam4 = \"default2\" # this one will get its default value, no warning given\n# Also warn about unexpected `bad` key, and ignored\n</code></pre></p>"},{"location":"defining-generators/#the-context-object","title":"The context object","text":"<p>Regarding the <code>ctx</code> parameter, it is the context. If you don't use it, you can skip it. But it is useful if you want to receive some context parameters like:</p> <ul> <li><code>ctx.parent</code>: the parent node</li> <li><code>ctx.content</code>: the indented part of the block, with the indentation removed</li> <li><code>ctx.parser</code>: the markdown parser, can be used to parse the inner content or any other markdown code</li> <li><code>ctx.type</code>: the type of the block<ul> <li>If you reuse the same function for different types, this is how you discriminate them</li> </ul> </li> <li><code>ctx.metadata</code>: A dictionary with metadata from your metadata plugin.</li> <li><code>ctx.config</code>: A dictionary passed from <code>extension_configs.customblocks.config</code></li> </ul>"},{"location":"defining-generators/#producing-html","title":"Producing HTML","text":"<p>A generator can use several strategies to generate content:</p> <ul> <li>Return an html string (single root node)</li> <li>Return a <code>markdown.etree</code> <code>Element</code> object</li> <li>Manipulate <code>ctx.parent</code> to add the content and return <code>None</code></li> </ul> <p>In order to construct an ElementTree, we recommend using the Hyperscript utility. Resulting code will be more compact and readable and makes proper escaping when injecting values.</p>"},{"location":"defining-generators/#generator-helpers","title":"Generator helpers","text":"<p>Common code has been extracted from predefined generators. If you need this functionality you are encouraged to use them.</p> <ul> <li>Hyperscript: to generate html</li> <li>PageInfo: to extract metadata from a webpage</li> <li>Fetcher: to download resources with file based cache</li> </ul>"},{"location":"defining-generators/#hyperscript","title":"Hyperscript","text":"<p>You can generate html with strings or using <code>etree</code>; but there is a more elegant option.</p> <p>Hyperscript is the idea of writing code that generates html/xml as nested function calls that look like the actual xml structure. This can be done by using the <code>customblocks.utils.E</code> function which has this signature:</p> <pre><code>def E(tag, *children, **attributes): ...\n</code></pre> <p><code>tag</code> is the name of the tag (<code>pre</code>, <code>div</code>, <code>strong</code>...). An empty string is equivalent to <code>div</code>. It can have appended several <code>.classname</code> that will be added as element class.</p> <p>Any keyword parameter will be taken as element attributes. You can use the special <code>_class</code> attribute to append more classes. Notice the underline, as <code>class</code> is a reserved word in Python.</p> <p><code>children</code> takes the keyless parameters and they can be:</p> <ul> <li><code>None</code>: then it will be ignored</li> <li><code>dict</code>: it will be merged with the attributes</li> <li><code>str</code>: it will be added as text</li> <li><code>etree.Element</code>: it will be added as child node</li> <li><code>customblocks.utils.Markdown</code>: will append parsed markdown (see below)</li> <li>Any <code>tuple</code>, <code>list</code> or iterable: will add each item following previous rules</li> </ul> <pre><code>from customblocks.utils import E, Markdown\n\ndef mytype(ctx, image):\n    return (\n        E('.mytype',\n            dict(style=\"width: 30%; align: left\"),\n            E('a', dict(href=image),\n                E('img', src=image),\n            ),\n            Markdown(ctx.content, ctx.parser),\n        )\n    )\n</code></pre>"},{"location":"defining-generators/#pageinfo","title":"PageInfo","text":"<p><code>utils.pageinfo.PageInfo</code> is a class that retrieves meta information from html pages by means of its properties.</p> <p>Properties are computed lazily and use cache. Once you get one property for a given page, later uses will have little impact.</p> <p>Any attribute you explicit on the constructor will override the ones derived from actual content.</p> <pre><code>info = PageInfo(html, url='http://site.com/path/page.html')\ninfo.sitename # the name of the site (meta og:site_name or the domain\ninfo.siteicon # the favicon or similar\ninfo.siteurl  # the base url of the site (not the page)\ninfo.title    # page title (from og:title meta or `&lt;title&gt;` content)\ninfo.description # short description (from og:description or twitter:description)\ninfo.image    # featured image (from og:image or twitter:image, or site image)\n</code></pre>"},{"location":"defining-generators/#fetcher","title":"Fetcher","text":"<p>A fetcher object is a wrapper around the <code>requests</code> library that uses caching to avoid downloading once and again remote resource each time you compile the markdown file.</p> <p>The first time a resource is succesfully downloaded by a fetcher the request response is stored in the provided folder in a yaml file which has the mangled url as name. Successive tries to download it just take the content of that file to construct a query.</p> <pre><code>from customblocks.utils import Fetcher\n\nfetcher = Fetcher('mycachedir')\nresponse = fetcher.get('https://canvoki.net/codder')\n# to force next call\nfetcher.remove('https://canvoki.net/codder')\n</code></pre>"},{"location":"generators-admonition/","title":"Admonition (<code>customblocks.generators.admonition</code>)","text":"<p>An admonition is a specially formatted text out of the main flow which remarks a piece of text. Often the text is placed in a box and with a side icon to identify it as that special type of text.</p> <p>Admonition generator is, by default, assigned to the following types: <code>attention</code>, <code>caution</code>, <code>danger</code>, <code>error</code>, <code>hint</code>, <code>important</code>, <code>note</code>, <code>tip</code>, <code>warning</code>.</p> <p>So you can write:</p> <pre><code>::: danger\n    Do not try to do this at home\n</code></pre> <p>In order to generate:</p> <pre><code>&lt;div class=\"admonition danger\"&gt;\n&lt;p class=\"admonition-title\"&gt;Danger&lt;/p&gt;\n&lt;p&gt;Do not try to do this at home&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>Generated code emulates the one generated by ReST admonitions (which is also emulated by <code>markdown.extra.admonition</code>). So, you can benefit from existing styles and themes.</p> <p>With the style of this documentation, it looks like this:</p> <p>Danger</p> <p>Do not try to do this at home</p>"},{"location":"generators-admonition/#options","title":"Options","text":"<code>title</code> in the title box show that text instead of the  <code>*args</code> added as additional classes for the outter div <code>**kwds</code> added as attributes for the outter div content: reparsed as markdown <p>Warning</p> <p>If you are migrating from <code>extra.admonition</code>, be careful since <code>extra</code> identifies title because the quotes, while <code>customblocks</code> will take the first parameter as title and next values as additional classes. If you like having the classes before, you should explicit especify <code>title</code> key.</p> <pre><code>::: danger blinking title=\"Super danger\"\n    Do **not** try to do this at home\n</code></pre>"},{"location":"generators-admonition/#styling","title":"Styling","text":"<p>You can use the recommended style.</p> <p>Since most themes in generation environments (Pelican, mkdocs...) have already styles for admonitions, it might work without that css (just like this documentation) which is using mkdocs defaults.</p>"},{"location":"generators-admonition/#examples","title":"Examples","text":"<pre><code>::: note\n    This is a note\n\n::: note \"Custom note title\" style=\"border-width: 3pt; border-radius: 10pt\"\n    This is a note with customized style and title, and rich **markdown**\n\n    - item\n    - item\n\n::: important\n    This is important\n\n::: warning\n    This is a warning\n\n::: caution\n    This is a caution\n\n::: attention\n    Something to be attended\n\n::: danger\n    This is a danger\n\n::: error\n    This is a error\n\n::: hint\n    This is a hint\n\n::: tip\n    This is a tip\n</code></pre> <p>Note</p> <p>This is a note</p> <p>Custom note title</p> <p>This is a note with customized style and title, and rich markdown</p> <ul> <li>item</li> <li>item</li> </ul> <p>Important</p> <p>This is important</p> <p>Warning</p> <p>This is a warning</p> <p>Caution</p> <p>This is a caution</p> <p>Attention</p> <p>Something to be attended</p> <p>Danger</p> <p>This is a danger</p> <p>Error</p> <p>This is a error</p> <p>Hint</p> <p>This is a hint</p> <p>Tip</p> <p>This is a tip</p>"},{"location":"generators-container/","title":"Container (<code>customblocks.generators.container</code>)","text":"<p>This generator is the default one used when a type has no generator associated.</p> <p>It generates a <code>&lt;div&gt;</code> element with the typename as class. It also appends any positional parameter as additional classes and keyword arguments as attributes. The content is reinterpreted as markdown.</p> <p>This is quite useful to create a 'div' structure in the html document.</p>"},{"location":"generators-container/#options","title":"Options","text":"<code>*args</code> added as additional classes for the outter div <code>**kwds</code> added as attributes for the outter div content: reparsed as markdown"},{"location":"generators-container/#example","title":"Example","text":"<p>The following example:</p> <pre><code>::: sidebar left style=\"width: 30em\"\n    ::: widget\n        # Social\n        ...\n    ::: widget\n        # Related\n        ...\n</code></pre> <p>Renders as:</p> <pre><code>&lt;div class='sidebar left' style=\"width: 30em\"&gt;\n    &lt;div class='widget'&gt;\n        &lt;h1&gt;Social&lt;/h1&gt;\n        &lt;p&gt;...&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class='widget'&gt;\n        &lt;h1&gt;Related&lt;/h1&gt;\n        &lt;p&gt;...&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"generators-facebook/","title":"Facebook (<code>customblocks.generators.facebook</code>)","text":"<p>Embeds a Facebook post.</p> <p>Page id and post id are the mandatory parameters for this component.</p> <p>You can find them from the post url, obtained by clicking on the post date. The url has the form:</p> <p><code>https://www.facebook.com/{pageid}/posts/{postid}</code></p> <p>Warning</p> <p>Generated code will include user tracking from Facebook. User browser might, wisely, block the embed.</p> <p>A privacy safe version of this plugin is planned for the future.</p>"},{"location":"generators-facebook/#options","title":"Options","text":"<code>page</code> Page (or user) id <code>post</code> Post code. <p>You can obtain it from the url the post date points to. Should be a public post in order to work.</p> <code>width</code> (keyword only, default 500) embed width (must be between 350 and 750)"},{"location":"generators-facebook/#example","title":"Example","text":"<pre><code>::: facebook DesconexionIBEX35 pfbid0DXwq1fVjC7RRHjxqCevvrCuMaihZoSixKpJpUFxBQGGCPFEBGdkiKWYtZx4A6fGRl\n</code></pre> <pre><code>::: facebook lovokmon 10160236064339354 height=200\n</code></pre> <pre><code>::: facebook width=350 DesconexionIBEX35 pfbid0DXwq1fVjC7RRHjxqCevvrCuMaihZoSixKpJpUFxBQGGCPFEBGdkiKWYtZx4A6fGRl\n</code></pre>"},{"location":"generators-facebook/#todo","title":"TODO","text":"<ul> <li>Obtain post information on static generation time and build a privacy safe place holder</li> </ul>"},{"location":"generators-figure/","title":"Figure (<code>customblocks.generators.figure</code>)","text":"<p>An image as captioned figure. The content is taken as caption.</p>"},{"location":"generators-figure/#options","title":"Options","text":"<code>url</code> the url to the image <code>alt</code> (keyword only) image alt attribute <code>title</code> (keyword only) image title attribute <code>lightbox</code> (bool) if true, on click, the image will open in a lightbox instead of a new tab which is the default. <code>embed</code> (bool) if true inline the image as data url <code>local</code> (bool) if true and url is remote, download the image and make it a local one <code>thumb</code> (bool|N|NxN) if true generate a reduced size image which expands to a better resolution.   A size in pixels may be specified. <code>*args</code> additional classes for root <code>&lt;figure&gt;</code> tag <code>**kwds</code> additional attributes for root <code>&lt;figure&gt;</code> tag"},{"location":"generators-figure/#styling","title":"Styling","text":"<p>A figure css is provided.</p> <p>The <code>lightbox</code> mode relies heavily on this css in order to work without using javascript.</p>"},{"location":"generators-figure/#configurations","title":"Configurations","text":"<code>figure_local</code> (bool) set it to true to set all images <code>local</code> by default. Override with <code>nolocal</code>. <code>figure_embed</code> (bool) set it to true to set all images <code>embed</code> by default. Override with <code>noembed</code>. <code>figure_thumb</code> (bool) set it to true to set all images <code>thumb</code> by default. Override with <code>nothumb</code> or setting <code>thumb</code> to a non boolean value. <code>figure_lightbox</code> (bool) set it to true to set all images <code>lightbox by default. Override with</code>nolightbox. <code>figure_staticPath</code> (path) prefix were to place generated images (local, thumbs...) <code>figure_staticBaseUrl</code> (url) prefix to append to generated urls in <code>figure_staticPath</code>"},{"location":"generators-figure/#examples","title":"Examples","text":"<pre><code>::: figure https://www.w3schools.com/howto/img_lights.jpg alt='an image' nice\n    This is a **nice** image.\n</code></pre> <p>Renders into:</p> <pre><code>&lt;figure class=\"nice\"&gt;\n  &lt;a href=\"https://www.w3schools.com/howto/img_lights.jpg\" target=\"_blank\"&gt;\n    &lt;img src=\"https://www.w3schools.com/howto/img_lights.jpg\" alt=\"an image\" /&gt;\n  &lt;/a&gt;\n  &lt;figcaption&gt;\n    &lt;p&gt;This is a &lt;b&gt;nice&lt;/b&gt; image&lt;/p&gt;\n  &lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>This is a nice image.</p> <p>The <code>lightbox</code> option generates a slighty different markup:</p> <pre><code>:::figure lightbox https://www.w3schools.com/howto/img_lights.jpg pull-right style=\"width:40%\"\n    what a gorgeus image\n</code></pre> <pre><code>&lt;figure class=\"lightbox\" id=\"fafb8273-ef7c-47b4-a31f-57d9e0387fc1\" style=\"width:40%\"&gt;\n  &lt;a class=\"lightbox-background\" href=\"javascript:history.back()\"&gt;&lt;/a&gt;\n  &lt;a href=\"#fafb8273-ef7c-47b4-a31f-57d9e0387fc1\"&gt;\n    &lt;img src=\"https://www.w3schools.com/howto/img_snow.jpg\" /&gt;\n  &lt;/a&gt;\n  &lt;figcaption&gt;\n    &lt;p&gt;what a gorgeus image&lt;/p&gt;\n  &lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre> <p>what a gorgeus image</p>"},{"location":"generators-figure/#todo-you-can-help","title":"TODO (you can help!)","text":"<ul> <li>[ ] configurable saving place for <code>local</code></li> <li>[x] global settings to avoid changing every figure</li> <li>[ ] figure enumeration (\"Figure N:\")</li> <li>[x] thumbnails</li> <li>[x] fetch external images to make them local</li> <li>[ ] css for placement classes (left, centered, right...)</li> <li>[ ] improve css</li> </ul>"},{"location":"generators-goteo/","title":"Goteo (<code>customblocks.generators.goteo</code>)","text":"<p>Embeds a Goteo fund raising campaign widget.</p>"},{"location":"generators-goteo/#options","title":"Options","text":"<code>id</code> The id of the project"},{"location":"generators-goteo/#example","title":"Example","text":"<pre><code>::: goteo lo-nuestro-es-de-verdad\n</code></pre>"},{"location":"generators-instagram/","title":"Instagram (<code>customblocks.generators.instagram</code>)","text":"<p>Embeds an Instagram post.</p> <p>You can find the post url by clicking on the three dots and <code>Go to post</code>. The url usually has the form:</p> <p><code>https://www.instagram.com/p/{post}/</code></p> <p>Warning</p> <p>Generated code will include user tracking from Facebook. User browser might, wisely, block the embed.</p> <p>A privacy safe version of this plugin is planned for the future.</p>"},{"location":"generators-instagram/#options","title":"Options","text":"<code>post</code> post id you can retrieve from the url when showing the  <code>caption/nocaption</code> (flag, keyword only, default true) if true show the caption and the comments <code>*args</code> any keyless argument will turn into additional classes for the outer element <code>**kwds</code> any keyword argument will turn into additional attributes for the outer element"},{"location":"generators-instagram/#styling","title":"Styling","text":"<p>For styling purposes, upper element can be selected with <code>blockquote.instagram-media</code>.</p>"},{"location":"generators-instagram/#examples","title":"Examples","text":"<pre><code>::: instagram CkYZbEhIgjS nocaption\n</code></pre> Instagram post embedding not available.  Watch it on Instagram <pre><code>::: instagram CkYZbEhIgjS\n</code></pre> Instagram post embedding not available.  Watch it on Instagram <pre><code>::: instagram CkYZbEhIgjS nocaption style=\"width: 100%\"\n</code></pre> Instagram post embedding not available.  Watch it on Instagram"},{"location":"generators-instagram/#todos","title":"TODOs","text":"<ul> <li>Privacy friendly version</li> </ul>"},{"location":"generators-linkcard/","title":"Link card (<code>customblocks.generators.linkcard</code>)","text":"<p>A link card is a informative box about an external source. It is similar to the card that popular apps like Wordpress, Facebook, Twitter, Telegram, Slack... generate when you embed/post a link.</p> <p>In order to build the box, the generator downloads the target url and extracts social metadata: Featured image, title, description... The download page is cached so that first non-failing download will avoid further downloads.</p> <pre><code>::: linkcard https://css-tricks.com/essential-meta-tags-social-media/\n</code></pre> <p>The Essential Meta Tags For Social Media | CSS-Tricks</p> <p> These days, almost every website encourages visitors to share its pages on social media. We\u2019ve all seen the ubiquitous Facebook and Twitter icons, among </p> Read more CSS-TRICKS <p>This generator uses the <code>fetcher</code> helper. Thus, the first fetch will be cached for later generations.</p>"},{"location":"generators-linkcard/#options","title":"Options","text":"<code>url</code> The url to embed as card <code>wideimage</code> (bool, default True) Whether the featured image will be shown wide, if not, a small thumb will be shown <code>*args</code> any extra positional value will be added as class to the top level element <p>Additionally you can provide the following keyword parameters to override information extracted from the url:</p> <ul> <li><code>image</code>: the image heading the card</li> <li><code>title</code>: the caption</li> <li><code>description</code>: the text describing the link (though using content is recommended)</li> <li><code>siteurl</code>: a link to the main site</li> <li><code>sitename</code>: the name of the main site</li> <li><code>siteicon</code>: the site icon</li> </ul> <p>Content, if provided, will be used as description instead of the summary in the page.</p>"},{"location":"generators-linkcard/#styling","title":"Styling","text":"<p>The above example uses this css.</p> <p>That stylesheet have some configurable css vars you may modify.</p>"},{"location":"generators-linkcard/#examples","title":"Examples","text":"<pre><code>::: linkcard nowideimage https://css-tricks.com/essential-meta-tags-social-media/\n</code></pre> <p>The Essential Meta Tags For Social Media | CSS-Tricks</p> <p> These days, almost every website encourages visitors to share its pages on social media. We\u2019ve all seen the ubiquitous Facebook and Twitter icons, among </p> Read more CSS-TRICKS"},{"location":"generators-linkcard/#todo","title":"TODO","text":"<ul> <li>Global default options</li> <li>Image placeholder while loading</li> <li>Display author metadata</li> </ul>"},{"location":"generators-map/","title":"Map (<code>customblocks.generators.map</code>)","text":"<p>Embeds a map for the specified location.</p> <p>Currently, OSM services are used both for geolocation during generation time and and the embed in browsing time.</p>"},{"location":"generators-map/#options","title":"Options","text":"<code>location</code> The location to display in the map <code>marker</code>/<code>nomarker</code> (bool, default True) Whether to show or not the location with a marker <code>*args</code> Remaining positional arguments are added as class to the upper element <code>**kwds</code> Remaining keyword arguments are added as attributes to the upper element"},{"location":"generators-map/#examples","title":"Examples","text":"<pre><code>::: map \"City of London\" nomarker\n</code></pre> <pre><code>::: map \"Lanteira\"\n</code></pre> <pre><code>::: map \"Pa\u00efsos catalans\"\n</code></pre> <pre><code>::: map \"Germany\"\n</code></pre>"},{"location":"generators-mastodon/","title":"Mastodon (<code>customblocks.generators.mastodon</code>)","text":"<p>Embeds a Mastodon post. Mastodon is the federated social network for short posts.</p> <p>Federated means that users might choose the server to have the account on, just like email, and the servers talk with each other to provide the service. Because of that you should provide <code>server</code>, <code>user</code> and <code>post</code>.</p> <p>Post urls have this form: <code>https://{server}/{user}/{post}</code> for example: <code>https://mastodon.social/@trwnh/99664077509711321</code>.</p> <p>If you are browsing a list of posts or a thread, you can obtain the url to the specific post by clicking on the date.</p>"},{"location":"generators-mastodon/#example","title":"Example","text":"<pre><code>::: mastodon mastodon.social @trwnh 99664077509711321\n</code></pre> <pre><code>::: mastodon mastodon.social @votomitico 101638382345543997\n</code></pre>"},{"location":"generators-mastodon/#options","title":"Options","text":"<code>server</code> mastodon instance where the user lives <code>user</code> the user that wrote the publication <code>post</code> the publication id (a long number)"},{"location":"generators-mastodon/#todo","title":"TODO","text":"<ul> <li>Accept users as <code>@user@server</code></li> <li>Accept post url</li> </ul>"},{"location":"generators-peertube/","title":"Peertube (<code>customblocks.generators.peertube</code>)","text":"<p>Peertube is a decentralized alternative to video sites like youtube.</p> <p>Videos are uploaded to a federated instance (host), and then distributed to the others so that download can be done  downloaded using all instances.</p>"},{"location":"generators-peertube/#options","title":"Options","text":"<code>instance</code> The domain hosting the video <code>uuid</code> uuid in the embed url (Not the regular one!!) <code>start</code> (keyword only, format as <code>3m23s</code>) starting playback point <code>stop</code> (keyword only, format as <code>3m23s</code>) stopping playback point <code>autoplay/noautoplay</code> (flag, default False) play as the video is available <code>loop/noloop</code> (flag, default False) loop or not the video after end <code>title/notitle</code> (flag, default True) show or hide the video title overlay <code>controls/nocontrols</code> (flag, default True) show or hide the playback controls <code>muted/nomuted</code> (flag, default False) mute the video on loading <code>p2p/nop2p</code> (flag, default True) use p2p to download the video <code>*args</code> added as additional class for the outter div <code>**kwds</code> added as additional attributes for the outter div"},{"location":"generators-peertube/#styling","title":"Styling","text":"<p>The component can be selected as <code>div.videowrapper.peertube</code>.</p> <p>Note that the <code>videowrapper</code> class is common with other video embeds and has a recommended css.</p>"},{"location":"generators-peertube/#examples","title":"Examples","text":"<pre><code>::: peertube tilvids.com bb6057d2-427b-4c31-9b8c-0a8c7d0a29c9  loop autoplay\n</code></pre> <pre><code>::: peertube video.blender.org  e8351755-4cf7-43b0-87b8-5e037db106ba start=1m stop=1m5s autoplay\n</code></pre>"},{"location":"generators-peertube/#todo","title":"TODO","text":"<ul> <li>Infer UUID from base64 ids</li> <li>Infer UUID and pod from video url</li> </ul>"},{"location":"generators-twitter/","title":"Twitter (<code>customblocks.generators.twitter</code>)","text":"<p>Embeds a tweet in a privacy safe way.</p>"},{"location":"generators-twitter/#example","title":"Example","text":"<pre><code>::: twitter votomitico 1193240526373507072 theme=dark\n</code></pre> <p>Para que no te encuentres sorpresas y evitar malos entendidos, estas son todas las papeletas al congreso que te encontraras en la mesa.https://t.co/CteAknu7AW</p>\u2014 Mitos electorales (@votomitico) November 9, 2019"},{"location":"generators-twitter/#options","title":"Options","text":"<code>user</code> the user that wrote the tweet <code>tweet</code> the tweet id (a long number) <code>theme</code> (optional, default <code>light</code>) It can be either <code>dark</code> or <code>light</code> <code>hideimages</code> Do not show attached images in the embedded <code>align</code> <code>left</code>, <code>center</code> or <code>right</code> <code>conversation</code> whether to add or not the full thread"},{"location":"generators-verkami/","title":"Verkami (<code>customblocks.generators.verkami</code>)","text":"<p>Embeds a Verkami fund raising campaign widget.</p>"},{"location":"generators-verkami/#options","title":"Options","text":"<code>id</code> The id of the project (can be the number or the full id) <code>landscape</code> (Flag, default False) instead of a portrait widget generate a landscape one"},{"location":"generators-verkami/#example","title":"Example","text":"<pre><code>::: verkami 34131-breve-viaje-por-la-espana-de-las-brujas\n</code></pre> <pre><code>::: verkami 26588 landscape\n</code></pre>"},{"location":"generators-vimeo/","title":"Vimeo (<code>customblocks.generators.vimeo</code>)","text":"<p>This generator generates an embeded vimeo video.</p>"},{"location":"generators-vimeo/#example","title":"Example","text":"<pre><code>::: vimeo 139579122 \n</code></pre>"},{"location":"generators-vimeo/#options","title":"Options","text":"<code>autoplay/noautoplay</code> (flag, default False) starts the video as soon as it is loaded <code>loop/noloop</code> (flag, default False) restart again the video once finished <code>bylabel/nobylabel</code> (flag, default True) Shows the video author's name <code>portrait/noportrait</code> (flag, default False) Shows the video author's avatar <code>*args</code> added as additional class for the outter div <code>**kwds</code> added as additional attributes for the outter div <p>Content is ignored.</p>"},{"location":"generators-wikipedia/","title":"Wikipedia (<code>customblocks.generates.wikipedia</code>)","text":"<p>Generates a linkcard from from a lemma for the Wikipedia.</p> <p>The difference with a <code>linkcard</code> is that instead of the full url to the article you just must provide the lemma/title.</p>"},{"location":"generators-wikipedia/#options","title":"Options","text":"<code>lemma</code> The lemma for the article <code>lang</code> (keyword only, default <code>en</code>) Language (or wikipedia instance) <code>*args</code> extra positional arguments are appended as classes for the top level element <code>**kwds</code> any extra keyword argument is used like in a <code>linkcard</code>"},{"location":"generators-wikipedia/#examples","title":"Examples","text":"<pre><code>::: wikipedia \"Sant Joan Desp\u00ed\"\n</code></pre> <p>Sant Joan Desp\u00ed - Wikipedia</p> <p> <p>Sant Joan Desp\u00ed (Old Catalan for 'Saint John of the Pine'; Catalan pronunciation: [\u02c8sa\u0272 \u0292u\u02c8an d\u0259s\u02c8pi]) is a city and municipality located in the Baix Llobregat area (Barcelona province in Catalonia, Spain). It is situated on the left bank of the Llobregat river.</p> </p> Read more EN.WIKIPEDIA.ORG <pre><code>::: wikipedia \"Sant Joan Desp\u00ed\" lang=ca\n</code></pre> <p>Sant Joan Desp\u00ed - Viquip\u00e8dia, l'enciclop\u00e8dia lliure</p> <p> <p>Sant Joan Desp\u00ed \u00e9s un municipi dins de la comarca del Baix Llobregat, situat al pla del Llobregat, a l'esquerra del riu. El municipi confronta amb els de Sant Feliu de Llobregat, Sant Just Desvern, Esplugues de Llobregat, Cornell\u00e0 de Llobregat, Sant Boi i Santa Coloma de Cervell\u00f3.</p> </p> Read more CA.WIKIPEDIA.ORG <pre><code>::: wikipedia \"Sant Joan Desp\u00ed\" wideimage\n</code></pre> <p>Sant Joan Desp\u00ed - Wikipedia</p> <p> <p>Sant Joan Desp\u00ed (Old Catalan for 'Saint John of the Pine'; Catalan pronunciation: [\u02c8sa\u0272 \u0292u\u02c8an d\u0259s\u02c8pi]) is a city and municipality located in the Baix Llobregat area (Barcelona province in Catalonia, Spain). It is situated on the left bank of the Llobregat river.</p> </p> Read more EN.WIKIPEDIA.ORG"},{"location":"generators-wikipedia/#styling","title":"Styling","text":"<p>Generated Wikipedia cards are just linkcards with an additional <code>wikipedia</code> class to target them specifically, if you need to. Refer to linkcard styling section. Examples above use the stylesheet referred there.</p>"},{"location":"generators-youtube/","title":"Youtube (<code>customblocks.generators.youtube</code>)","text":"<p>This generator generates an embeded youtube video.</p>"},{"location":"generators-youtube/#example","title":"Example","text":"<pre><code>::: youtube HUBNt18RFbo\n</code></pre> <pre><code>&lt;div class=\"videowrapper youtube\"&gt;\n  &lt;iframe src=\"https://www.youtube-nocookie.com/embed/HUBNt18RFbo\"&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre> <p>Warning</p> <p>Even though, youtube-nocookie.com is suposed to avoid tracing cookies, google sets some tracing cookies from one of the included javascript files.</p>"},{"location":"generators-youtube/#options","title":"Options","text":"<code>id</code> video id <code>autoplay/noautoplay</code> (flag, default False) starts the video as soon as it is loaded <code>loop/noloop</code> (flag, default False) restart again the video once finished <code>controls/nocontrols</code> (flag, default True) show the controls <code>*args</code> added as additional class for the outter div <code>**kwds</code> added as attributes for the outter div <p>Indented content is ignored.</p> <p>Or you could set <code>youtube_inlineFluidStyle</code> config to <code>True</code> and the style will be added inline to every video.</p>"},{"location":"generators-youtube/#styling","title":"Styling","text":"<p>The component can be selected as <code>div.videowrapper.youtube</code>.</p> <p>Note that the <code>videowrapper</code> class is common with other video embeds and has a recommended css.</p>"},{"location":"inspiration/","title":"Inspiration","text":"<p>This extension has been inspired by several existing software and other markdown extensions.</p>"},{"location":"inspiration/#latex-macros","title":"LaTeX macros","text":"<p>I wanted to implement something i had in LaTeX. The ability to create repeating content by defining a parametrized code.</p> <p>LaTeX macros are hard to write and very hard to deal with errors, but they are still a quite cool tool once you have them working. So, having that with Python and Markdown should be simpler and cooler.</p>"},{"location":"inspiration/#python","title":"Python","text":"<p>Using identation as syntactic element to generate structure is a pythonic think. Sure. Having both keyword and positional parameters is also a Pythonic thing, although this extension is more flexible in the order of providing them.</p>"},{"location":"inspiration/#superfences","title":"Superfences","text":"<p>Superfences extension lets you extend and define your own type of fences and then make them do things beyond what fences are suposed to do, formating code.</p> <p>I used the idea of having different types of blocks you can define the behaviour within the same common syntax.</p> <p>Despite that, that common syntax was not enough to have parameters and it was hard to define sub blocks. Also you are abusing a construct that is suposed to be used for code.</p>"},{"location":"inspiration/#admonitions","title":"Admonitions","text":"<p>Admonitions extension lets you define divs with classes and nest them if you want. This is quite useful to structure your html, despite the fact you can only control html attributes.</p> <p>I like the idea of using indent to nest admonitions and reparsing the content as markdown again is a strategy i also took for this extension.</p> <p>Sadly, this extension just renders the output in one way, a div with a title div. The only chance you have to change the output is  by using css or js.</p>"},{"location":"inspiration/#container","title":"Container","text":"<p>Containers generates more direct html than admonitions (no title). But instead using indentation, it uses closing tag. This syntax is hard to follow when you have several nested items.</p>"},{"location":"inspiration/#other-extensions","title":"Other extensions","text":"<ul> <li>Structured Markdown</li> </ul>"},{"location":"inspiration/#youtube-extensions","title":"Youtube extensions","text":"<ul> <li>Video-to-Markdown</li> </ul>"},{"location":"motivation/","title":"Motivation","text":"<p>This text explains the motivation to write this extension and the rationale under the design decissions.</p> <p>Many custom objects like figures, video embeds... have no native markup in Markdown. You could hardcode them as HTML or you could also use an extension for that.</p> <p>Hardcoding HTML has a clear drawback: Besides cluttering the markdown with HTML, whenever we need to upgrade the block, because you found a better way of embeding videos or whatever, you have to change that code in many places.</p> <p>Extensions avoid the HTML clutter, but, still they are not useful to upgrade your blocks. Usually improving a block means moving to a different extension, with more features. But extensions, in order to avoid collisions,  tend to be creative on the markup they use, even if they cover the same function. So if you migrate to a more powerfull extension, you end up editing all your blocks again.</p> <p>Another motivation is that coding an extension is hard. Markdown extension API is necessarily complex to address many scenarios. But this extension responds just to this single but quite general scenario:</p> <p>I want to generate this piece of HTML which depends on those parameters and might include a given content.</p> <p>So...</p> <p>Why using a common markup for that many different structures?</p> <p>This way, markup syntax explosion is avoided, and users do not have to learn a new syntax. Also, developing new block types is easier if you can reuse the same parser.</p> <p>Why using a type name to identify the structure?</p> <p>A name, as part of the markup, clarifies the block meaning on reading. Also provides a hook to change the behaviour while keeping the semantics. If you do not like the predefined generator for a given type, you can provide a new generator with your extended features.</p> <p>Why defining a common attribute markup?</p> <p>A common attribute markup is useful to stablish a general mapping between markup attributes and Python function parameters. The signature of the generator function defines the attributes that can be used and the extension does the mapping with no extra glue required.</p> <p>Why using indentation to indicate inner content?</p> <p>It visually shows the scope of the block and allows nesting. If the content is reparsed as Markdown, it could still include other components with their inner content a level deeper.</p> <p>Why functions as means for extension?</p> <p>Well, it is simpler than having class interfaces, and Python introspection helps a lot to do the parameter mapping.</p>"}]}